averageRDM_unique <- averageRDM_source[averageRDM_lower_triangle_filter]
avg_group_same_animacy <- averageRDM_unique[rdm_unique[] == 1]
avg_group_diff_animacy <- averageRDM_unique[rdm_unique[] == 0]
t.test(avg_group_same_animacy, avg_group_diff_animacy)
# suppress the scientific notation of numbers
options(scipen=999)
source("q1-3.R")
categoryVectorsTable <- read.table("RSAlabassignment/CategoryVectors")
categoryLablesTable <- read.table("RSAlabassignment/CategoryLabels")
neuralResponses <- read.table("RSAlabassignment/NeuralResponses")
# Question 4
# Effect of animacy on the original data's dissimilarity
# RDM for the same & different animacy pairs
row = 92
col = 92
rdm_source <- matrix(0, nrow = row, ncol = col)
for(i in 1:row) {
for(j in 1:col) {
if(categoryVectorsTable[i,1] == categoryVectorsTable[j,1]) {
rdm_source[i, j] = 1
} else {
rdm_source[i, j] = 0
}
}
}
# Retrieve the non-duplicate data from the lower triangle of RDM without the diagonal data
rdm_lower_triangle_filter <- lower.tri(rdm_source, diag = FALSE)
rdm_unique <- rdm_source[rdm_lower_triangle_filter]
# Retrieve the non-duplicate data for the neural responses
neuralResponses_source <- 1 - cor(t(neuralResponses))
neuralResponses_lower_triangle_filter <- lower.tri(neuralResponses_source, diag = FALSE)
neuralResponses_unique <- neuralResponses_source[neuralResponses_lower_triangle_filter]
# Two groups: one with the same animacy; the other with the different animacy
group_same_animacy <- neuralResponses_unique[rdm_unique[] == 1]
group_diff_animacy <- neuralResponses_unique[rdm_unique[] == 0]
# T-test
t.test(group_same_animacy, group_diff_animacy)
# Question 5
# Effect of animacy on a single subject's dissimilarity
individual_source <- 1 - cor(t(pa_list[[1]]))
individual_lower_triangle_filter <- lower.tri(individual_source, diag = FALSE)
individual_unique <- individual_source[individual_lower_triangle_filter]
ind_group_same_animacy <- individual_unique[rdm_unique[] == 1]
ind_group_diff_animacy <- individual_unique[rdm_unique[] == 0]
t.test(ind_group_same_animacy, ind_group_diff_animacy)
# Effect of animacy on the averaged RDM's dissimilarity
averageRDM_source <- avgPa;
averageRDM_lower_triangle_filter <- lower.tri(averageRDM_source, diag = FALSE)
averageRDM_unique <- averageRDM_source[averageRDM_lower_triangle_filter]
avg_group_same_animacy <- averageRDM_unique[rdm_unique[] == 1]
avg_group_diff_animacy <- averageRDM_unique[rdm_unique[] == 0]
t.test(avg_group_same_animacy, avg_group_diff_animacy)
# suppress the scientific notation of numbers
options(scipen=999)
source("q1-3.R")
library(viridisLite)
library(gridExtra)
library(lattice)
library(tidyverse)
# Question 1
nrm <- read.table("RSAlabassignment/NeuralResponses")
pa <- 12
pa_list <- list()
pa_dissimilarity_list <- list()
row <- nrow(nrm)
col <- ncol(nrm)
mean <- 0
sd <- 1
# neural responses data mixed with the random noise coming from the normal distribution by rnorm()
# pa_list is a list containing all the simulated 12 participants data
for(i in 1:pa) {
noise <- matrix(rnorm(row * col, mean = mean, sd = sd), nrow = row, ncol = col);
pa_list[[i]] <- nrm + noise;
}
# dissimilarity matrix is compuated by the formula as below:
# step 1: transpose the 92x100 matrix to 100x92 matrix
# step 2: calculate the correlation pairwise for every image, correlation = similarity
# step 3: 1 - cor() = dissimilarity
for(i in 1:length(pa_list)) {
pa_dissimilarity_list[[i]] <- 1 - cor(t(pa_list[[i]]))
}
# Question 2
# plot for a simulated subject and for the original data
coul <- viridis(row * col)
# a random single simulated data from subject 1
subjectPlot <- levelplot(pa_dissimilarity_list[[1]],
col.regions = coul,
main = "Subject 12 with normally-distributed noise",
xlab = "images (1 - 92)",
ylab = "images (1 - 92)")
originalPlot <- levelplot(1 - cor(t(nrm)),
main = "Original data",
col.regions = coul,
xlab = "images (1 - 92)",
ylab = "images (1 - 92)")
grid.arrange(subjectPlot, originalPlot, ncol=2)
# Question 3
# average PP
avgPa <- matrix(data = 0, nrow = 92, ncol = 92);
for(i in 1:length(pa_dissimilarity_list)) {
avgPa <- avgPa + pa_dissimilarity_list[[i]];
}
avgPa <- avgPa / pp
# Compare the averaged RDMs of 12 subjects to a single RDM
avgPlot <- levelplot(avgPa,
col.regions = coul,
main = "Averaged RDMs from all 12 subjects",
xlab = "images (1 - 92)",
ylab = "images (1 - 92)")
subjectPlot <- levelplot(pa_dissimilarity_list[[1]],
col.regions = coul,
main = "Subject 1 with normally-distributed noise",
xlab = "images (1 - 92)",
ylab = "images (1 - 92)")
grid.arrange(avgPlot, subjectPlot, ncol=2)
# Compare the averaged RDMs of 12 subjects to the original data
avgPlot <- levelplot(avgPa,
col.regions = coul,
main = "Averaged RDMs from all 12 subjects",
xlab = "images (1 - 92)",
ylab = "images (1 - 92)")
originalPlot <- levelplot(1 - cor(t(nrm)),
main = "Original data",
col.regions = coul,
xlab = "images (1 - 92)",
ylab = "images (1 - 92)")
grid.arrange(avgPlot, originalPlot, ncol=2)
library(viridisLite)
library(gridExtra)
library(lattice)
library(tidyverse)
# Question 1
nrm <- read.table("RSAlabassignment/NeuralResponses")
pa <- 12
pa_list <- list()
pa_dissimilarity_list <- list()
row <- nrow(nrm)
col <- ncol(nrm)
mean <- 0
sd <- 1
# neural responses data mixed with the random noise coming from the normal distribution by rnorm()
# pa_list is a list containing all the simulated 12 participants data
for(i in 1:pa) {
noise <- matrix(rnorm(row * col, mean = mean, sd = sd), nrow = row, ncol = col);
pa_list[[i]] <- nrm + noise;
}
# dissimilarity matrix is compuated by the formula as below:
# step 1: transpose the 92x100 matrix to 100x92 matrix
# step 2: calculate the correlation pairwise for every image, correlation = similarity
# step 3: 1 - cor() = dissimilarity
for(i in 1:length(pa_list)) {
pa_dissimilarity_list[[i]] <- 1 - cor(t(pa_list[[i]]))
}
# Question 2
# plot for a simulated subject and for the original data
coul <- viridis(row * col)
# a random single simulated data from subject 1
subjectPlot <- levelplot(pa_dissimilarity_list[[1]],
col.regions = coul,
main = "Subject 12 with normally-distributed noise",
xlab = "images (1 - 92)",
ylab = "images (1 - 92)")
originalPlot <- levelplot(1 - cor(t(nrm)),
main = "Original data",
col.regions = coul,
xlab = "images (1 - 92)",
ylab = "images (1 - 92)")
grid.arrange(subjectPlot, originalPlot, ncol=2)
# Question 3
# average PP
avgPa <- matrix(data = 0, nrow = row, ncol = col);
for(i in 1:length(pa_dissimilarity_list)) {
avgPa <- avgPa + pa_dissimilarity_list[[i]];
}
avgPa <- avgPa / pa
# Compare the averaged RDMs of 12 subjects to a single RDM
avgPlot <- levelplot(avgPa,
col.regions = coul,
main = "Averaged RDMs from all 12 subjects",
xlab = "images (1 - 92)",
ylab = "images (1 - 92)")
subjectPlot <- levelplot(pa_dissimilarity_list[[1]],
col.regions = coul,
main = "Subject 1 with normally-distributed noise",
xlab = "images (1 - 92)",
ylab = "images (1 - 92)")
grid.arrange(avgPlot, subjectPlot, ncol=2)
# Compare the averaged RDMs of 12 subjects to the original data
avgPlot <- levelplot(avgPa,
col.regions = coul,
main = "Averaged RDMs from all 12 subjects",
xlab = "images (1 - 92)",
ylab = "images (1 - 92)")
originalPlot <- levelplot(1 - cor(t(nrm)),
main = "Original data",
col.regions = coul,
xlab = "images (1 - 92)",
ylab = "images (1 - 92)")
grid.arrange(avgPlot, originalPlot, ncol=2)
avgPa <- matrix(data = 0, nrow = row, ncol = col);
for(i in 1:length(pa_dissimilarity_list)) {
avgPa <- avgPa + pa_dissimilarity_list[[i]];
}
# average PP
avgPa <- matrix(data = 0, nrow = row, ncol = col);
dim(avgPa)
avgPa <- matrix(data = 0, nrow = 92, ncol = 92);
for(i in 1:length(pa_dissimilarity_list)) {
avgPa <- avgPa + pa_dissimilarity_list[[i]];
}
avgPa <- avgPa / pa
library(viridisLite)
library(gridExtra)
library(lattice)
library(tidyverse)
# Question 1
nrm <- read.table("RSAlabassignment/NeuralResponses")
pa <- 12
pa_list <- list()
pa_dissimilarity_list <- list()
row <- nrow(nrm)
col <- ncol(nrm)
mean <- 0
sd <- 1
# neural responses data mixed with the random noise coming from the normal distribution by rnorm()
# pa_list is a list containing all the simulated 12 participants data
for(i in 1:pa) {
noise <- matrix(rnorm(row * col, mean = mean, sd = sd), nrow = row, ncol = col);
pa_list[[i]] <- nrm + noise;
}
# dissimilarity matrix is compuated by the formula as below:
# step 1: transpose the 92x100 matrix to 100x92 matrix
# step 2: calculate the correlation pairwise for every image, correlation = similarity
# step 3: 1 - cor() = dissimilarity
for(i in 1:length(pa_list)) {
pa_dissimilarity_list[[i]] <- 1 - cor(t(pa_list[[i]]))
}
# Question 2
# plot for a simulated subject and for the original data
coul <- viridis(row * col)
# a random single simulated data from subject 1
subjectPlot <- levelplot(pa_dissimilarity_list[[1]],
col.regions = coul,
main = "Subject 12 with normally-distributed noise",
xlab = "images (1 - 92)",
ylab = "images (1 - 92)")
originalPlot <- levelplot(1 - cor(t(nrm)),
main = "Original data",
col.regions = coul,
xlab = "images (1 - 92)",
ylab = "images (1 - 92)")
grid.arrange(subjectPlot, originalPlot, ncol=2)
# Question 3
# average PP
avgPa <- matrix(data = 0, nrow = 92, ncol = 92);
for(i in 1:length(pa_dissimilarity_list)) {
avgPa <- avgPa + pa_dissimilarity_list[[i]];
}
avgPa <- avgPa / pa
# Compare the averaged RDMs of 12 subjects to a single RDM
avgPlot <- levelplot(avgPa,
col.regions = coul,
main = "Averaged RDMs from all 12 subjects",
xlab = "images (1 - 92)",
ylab = "images (1 - 92)")
subjectPlot <- levelplot(pa_dissimilarity_list[[1]],
col.regions = coul,
main = "Subject 1 with normally-distributed noise",
xlab = "images (1 - 92)",
ylab = "images (1 - 92)")
grid.arrange(avgPlot, subjectPlot, ncol=2)
# Compare the averaged RDMs of 12 subjects to the original data
avgPlot <- levelplot(avgPa,
col.regions = coul,
main = "Averaged RDMs from all 12 subjects",
xlab = "images (1 - 92)",
ylab = "images (1 - 92)")
originalPlot <- levelplot(1 - cor(t(nrm)),
main = "Original data",
col.regions = coul,
xlab = "images (1 - 92)",
ylab = "images (1 - 92)")
grid.arrange(avgPlot, originalPlot, ncol=2)
# suppress the scientific notation of numbers
options(scipen=999)
source("q1-3.R")
categoryVectorsTable <- read.table("RSAlabassignment/CategoryVectors")
categoryLablesTable <- read.table("RSAlabassignment/CategoryLabels")
neuralResponses <- read.table("RSAlabassignment/NeuralResponses")
# Question 4
# Effect of animacy on the original data's dissimilarity
# RDM for the same & different animacy pairs
row = 92
col = 92
rdm_source <- matrix(0, nrow = row, ncol = col)
for(i in 1:row) {
for(j in 1:col) {
if(categoryVectorsTable[i,1] == categoryVectorsTable[j,1]) {
rdm_source[i, j] = 1
} else {
rdm_source[i, j] = 0
}
}
}
# Retrieve the non-duplicate data from the lower triangle of RDM without the diagonal data
rdm_lower_triangle_filter <- lower.tri(rdm_source, diag = FALSE)
rdm_unique <- rdm_source[rdm_lower_triangle_filter]
# Retrieve the non-duplicate data for the neural responses
neuralResponses_source <- 1 - cor(t(neuralResponses))
neuralResponses_lower_triangle_filter <- lower.tri(neuralResponses_source, diag = FALSE)
neuralResponses_unique <- neuralResponses_source[neuralResponses_lower_triangle_filter]
# Two groups: one with the same animacy; the other with the different animacy
group_same_animacy <- neuralResponses_unique[rdm_unique[] == 1]
group_diff_animacy <- neuralResponses_unique[rdm_unique[] == 0]
# T-test
t.test(group_same_animacy, group_diff_animacy)
# Question 5
# Effect of animacy on a single subject's dissimilarity
individual_source <- 1 - cor(t(pa_list[[1]]))
individual_lower_triangle_filter <- lower.tri(individual_source, diag = FALSE)
individual_unique <- individual_source[individual_lower_triangle_filter]
ind_group_same_animacy <- individual_unique[rdm_unique[] == 1]
ind_group_diff_animacy <- individual_unique[rdm_unique[] == 0]
t.test(ind_group_same_animacy, ind_group_diff_animacy)
# Effect of animacy on the averaged RDM's dissimilarity
averageRDM_source <- avgPa;
averageRDM_lower_triangle_filter <- lower.tri(averageRDM_source, diag = FALSE)
averageRDM_unique <- averageRDM_source[averageRDM_lower_triangle_filter]
avg_group_same_animacy <- averageRDM_unique[rdm_unique[] == 1]
avg_group_diff_animacy <- averageRDM_unique[rdm_unique[] == 0]
t.test(avg_group_same_animacy, avg_group_diff_animacy)
options(scipen=999)
categoryVectorsTable <- read.table("RSAlabassignment/CategoryVectors")
categoryLablesTable <- read.table("RSAlabassignment/CategoryLabels")
neuralResponses <- read.table("RSAlabassignment/NeuralResponses")
# Question 6
# Effect of face-ness on the dissimilarity of the original data
# RDM for the same & different face-ness pairs
row = 92
col = 92
rdm_source <- matrix(0, nrow = row, ncol = col)
for(i in 1:row) {
for(j in 1:col) {
if(categoryVectorsTable[i,6] == categoryVectorsTable[j,6]) {
rdm_source[i, j] = 1
} else {
rdm_source[i, j] = 0
}
}
}
# Retrieve the non-duplicate data from the lower triangle of RDM without the diagonal data
rdm_lower_triangle_filter <- lower.tri(rdm_source, diag = FALSE)
rdm_unique <- rdm_source[rdm_lower_triangle_filter]
# Retrieve the non-duplicate data for the neural responses
neuralResponses_source <- 1 - cor(t(neuralResponses))
neuralResponses_lower_triangle_filter <- lower.tri(neuralResponses_source, diag = FALSE)
neuralResponses_unique <- neuralResponses_source[neuralResponses_lower_triangle_filter]
# Two groups: one with the same face-ness; the other with the different face-ness
group_same_faceness <- neuralResponses_unique[rdm_unique[] == 1]
group_diff_faceness <- neuralResponses_unique[rdm_unique[] == 0]
# T-test
t.test(group_same_faceness, group_diff_faceness)
# Question 7
# Effect of face-ness on the dissimilarity of the animate objects
# RDM for same & different face-ness pairs ONLY in animate objects
# 48 is the boundary between animate and inanimate objects as shown in "CategoryVectors"
row = 48
col = 48
rdm_animate_source <- matrix(0, nrow = row, ncol = col)
for(i in 1:row) {
for(j in 1:col) {
if(categoryVectorsTable[i,6] == categoryVectorsTable[j,6]) {
rdm_animate_source[i, j] = 1
} else {
rdm_animate_source[i, j] = 0
}
}
}
rdm_animate_lower_triangle_filter <- lower.tri(rdm_animate_source, diag = FALSE)
rdm_animate_unique <- rdm_animate_source[rdm_animate_lower_triangle_filter]
# original data: neural responses for ONLY animate objects
neuralResponses_source <- 1 - cor(t(neuralResponses))
neuralResponses_animate_source <- neuralResponses_source[1:48, 1:48]
neuralResponses_animate_lower_triangle_filter <- lower.tri(neuralResponses_animate_source, diag = FALSE)
neuralResponses_animate_unique <- neuralResponses_animate_source[neuralResponses_animate_lower_triangle_filter]
animate_group_same_faceness <- neuralResponses_animate_unique[rdm_animate_unique[] == 1]
animate_group_diff_faceness <- neuralResponses_animate_unique[rdm_animate_unique[] == 0]
t.test(animate_group_same_faceness, animate_group_diff_faceness)
options(scipen=999)
categoryVectorsTable <- read.table("RSAlabassignment/CategoryVectors")
categoryLablesTable <- read.table("RSAlabassignment/CategoryLabels")
neuralResponses <- read.table("RSAlabassignment/NeuralResponses")
# Question 8
# Effect of human on the dissimilarity of the original data
# RDM for same & different human pairs
row = 92
col = 92
rdm_source <- matrix(0, nrow = row, ncol = col)
for(i in 1:row) {
for(j in 1:col) {
if(categoryVectorsTable[i,3] == categoryVectorsTable[j,3]) {
rdm_source[i, j] = 1
} else {
rdm_source[i, j] = 0
}
}
}
rdm_lower_triangle_filter <- lower.tri(rdm_source, diag = FALSE)
rdm_unique <- rdm_source[rdm_lower_triangle_filter]
# original data: neural responses
neuralResponses_source <- 1 - cor(t(neuralResponses))
neuralResponses_lower_triangle_filter <- lower.tri(neuralResponses_source, diag = FALSE)
neuralResponses_unique <- neuralResponses_source[neuralResponses_lower_triangle_filter]
group_same_human <- neuralResponses_unique[rdm_unique[] == 1]
group_diff_human <- neuralResponses_unique[rdm_unique[] == 0]
t.test(group_same_human, group_diff_human)
# Effect of human on the dissimilarity of the animate objects
# RDM for same & different human pairs ONLY in animate objects
row = 48
col = 48
rdm_animate_source <- matrix(0, nrow = row, ncol = col)
for(i in 1:row) {
for(j in 1:col) {
if(categoryVectorsTable[i,3] == categoryVectorsTable[j,3]) {
rdm_animate_source[i, j] = 1
} else {
rdm_animate_source[i, j] = 0
}
}
}
rdm_animate_lower_triangle_filter <- lower.tri(rdm_animate_source, diag = FALSE)
rdm_animate_unique <- rdm_animate_source[rdm_animate_lower_triangle_filter]
# original data: neural responses for ONLY animate objects
neuralResponses_source <- 1 - cor(t(neuralResponses))
neuralResponses_animate_source <- neuralResponses_source[1:48, 1:48]
neuralResponses_animate_lower_triangle_filter <- lower.tri(neuralResponses_animate_source, diag = FALSE)
neuralResponses_animate_unique <- neuralResponses_animate_source[neuralResponses_animate_lower_triangle_filter]
animate_group_same_human <- neuralResponses_animate_unique[rdm_animate_unique[] == 1]
animate_group_diff_human <- neuralResponses_animate_unique[rdm_animate_unique[] == 0]
t.test(animate_group_same_human, animate_group_diff_human)
options(scipen=999)
categoryVectorsTable <- read.table("RSAlabassignment/CategoryVectors")
categoryLablesTable <- read.table("RSAlabassignment/CategoryLabels")
neuralResponses <- read.table("RSAlabassignment/NeuralResponses")
# Question 9
# Effect of both animacy and face-ness on dissimilarity
# animacy RDM: 92x92
row = 92
col = 92
animacy_rdm_source <- matrix(0, nrow = row, ncol = col)
for(i in 1:row) {
for(j in 1:col) {
if(categoryVectorsTable[i,1] == categoryVectorsTable[j,1]) {
animacy_rdm_source[i, j] = 1
} else {
animacy_rdm_source[i, j] = 0
}
}
}
# Retrieve the non-duplicate data from the lower triangle of RDM without the diagonal data
animacy_rdm_lower_triangle_filter <- lower.tri(animacy_rdm_source, diag = FALSE)
animacy_rdm_unique <- animacy_rdm_source[animacy_rdm_lower_triangle_filter]
# Retrieve the non-duplicate data for the neural responses
neuralResponses_source <- 1 - cor(t(neuralResponses))
neuralResponses_lower_triangle_filter <- lower.tri(neuralResponses_source, diag = FALSE)
neuralResponses_unique <- neuralResponses_source[neuralResponses_lower_triangle_filter]
# data frame of the same & different animacy
data_frame <- cbind(neuralResponses_unique, animacy_rdm_unique)
# face-ness RDM: 92x92
row = 48
col = 48
faceness_rdm_source <- matrix(0, nrow = row, ncol = col)
for(i in 1:row) {
for(j in 1:col) {
if(categoryVectorsTable[i,6] == categoryVectorsTable[j,6]) {
faceness_rdm_source[i, j] = 1
} else {
faceness_rdm_source[i, j] = 0
}
}
}
faceness_rdm_source <- rbind(faceness_rdm_source, matrix(0, nrow = 44, ncol = 48))
faceness_rdm_source <- cbind(faceness_rdm_source, matrix(0, nrow = 92, ncol = 44))
# Retrieve the non-duplicate data from the lower triangle of RDM without the diagonal data
faceness_rdm_lower_triangle_filter <- lower.tri(faceness_rdm_source, diag = FALSE)
faceness_rdm_unique <- faceness_rdm_source[faceness_rdm_lower_triangle_filter]
# data frame of the same & different face-ness
data_frame <- cbind(data_frame, faceness_rdm_unique)
# Transform to data frame
data_frame <- as.tibble(data_frame)
data_frame <- data_frame %>% rename(dissimilarity = neuralResponses_unique,
animacy = animacy_rdm_unique,
faceness = faceness_rdm_unique)
View(data_frame)
# ANOVA
# Only animacy as the input factor
animacy_fit <- aov(dissimilarity ~ animacy, data = data_frame)
animacy_fit <- lm(dissimilarity ~ animacy, data = data_frame)
summary(animacy_fit)
# Only faceness as the input factor
faceness_fit <- aov(dissimilarity ~ faceness, data = data_frame)
faceness_fit <- lm(dissimilarity ~ faceness, data = data_frame)
summary(faceness_fit)
# Question 10
# Relative effect sizes for these two effects
# Animacy, faceness and their interaction as the input factors
cov(data_frame)
combined_fit <- lm(dissimilarity ~ animacy * faceness, data = data_frame)
summary(combined_fit)
install.packages("BayesianTools")
# T-test
t.test(group_same_faceness, group_diff_faceness)
