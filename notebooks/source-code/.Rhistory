ylab = "images (1 - 92)")
behaviourRDM <- read.table("RSAlabassignment/BehaviourRDM")
View(behaviourRDM)
levelplot(as.matrix(behaviourRDM),
main = "Behaviour RDM",
xlab = "images (1 - 92)",
ylab = "images (1 - 92)")
behaviourRDM <- read.table("RSAlabassignment/BehaviourRDM")
View(behaviourRDM)
levelplot(as.matrix(behaviourRDM),
col.regions = coul,
main = "Behaviour RDM",
xlab = "images (1 - 92)",
ylab = "images (1 - 92)")
library(viridisLite)
library(lattice)
# Question 14
behaviourRDM <- read.table("RSAlabassignment/BehaviourRDM")
row <- nrow(behaviourRDM)
col <- ncol(behaviourRDM)
coul <- viridis(row * col)
levelplot(as.matrix(behaviourRDM),
col.regions = coul,
main = "Behaviour RDM",
xlab = "images (1 - 92)",
ylab = "images (1 - 92)")
library(viridisLite)
library(lattice)
# Question 14
behaviourRDM <- read.table("RSAlabassignment/BehaviourRDM")
row <- nrow(behaviourRDM)
col <- ncol(behaviourRDM)
coul <- viridis(row * col)
levelplot(as.matrix(t(behaviourRDM)),
col.regions = coul,
main = "Behaviour RDM",
xlab = "images (1 - 92)",
ylab = "images (1 - 92)")
library(viridisLite)
library(lattice)
library(gridExtra)
# Question 14
behaviourRDM <- read.table("RSAlabassignment/BehaviourRDM")
row <- nrow(behaviourRDM)
col <- ncol(behaviourRDM)
coul <- viridis(row * col)
levelplot(as.matrix(behaviourRDM),
col.regions = coul,
main = "Behaviour RDM",
xlab = "images (1 - 92)",
ylab = "images (1 - 92)")
library(viridisLite)
library(lattice)
library(gridExtra)
# Question 14
behaviourRDM <- read.table("RSAlabassignment/BehaviourRDM")
row <- nrow(behaviourRDM)
col <- ncol(behaviourRDM)
coul <- viridis(row * col)
plot <- levelplot(as.matrix(behaviourRDM),
col.regions = coul,
main = "Behaviour RDM",
xlab = "images (1 - 92)",
ylab = "images (1 - 92)")
grid.arrange(plot, ncol=1)
library(viridisLite)
library(lattice)
# Question 14
behaviourRDM <- read.table("RSAlabassignment/BehaviourRDM")
row <- nrow(behaviourRDM)
col <- ncol(behaviourRDM)
coul <- viridis(row * col)
levelplot(as.matrix(behaviourRDM),
col.regions = coul,
main = "Behaviour RDM",
xlab = "images (1 - 92)",
ylab = "images (1 - 92)")
View(behaviourRDM)
# Question 14
behaviourRDM <- read.table("RSAlabassignment/BehaviourRDM", header = TRUE)
# Question 14
behaviourRDM <- read.table("RSAlabassignment/BehaviourRDM", header = FALSE)
row <- nrow(behaviourRDM)
col <- ncol(behaviourRDM)
coul <- viridis(row * col)
levelplot(as.matrix(behaviourRDM),
col.regions = coul,
main = "Behaviour RDM",
xlab = "images (1 - 92)",
ylab = "images (1 - 92)")
colnames(behaviourRDM)
library(viridisLite)
library(lattice)
# Question 14
behaviourRDM <- read.table("RSAlabassignment/BehaviourRDM", col.names = 1:92)
row <- nrow(behaviourRDM)
col <- ncol(behaviourRDM)
coul <- viridis(row * col)
levelplot(as.matrix(behaviourRDM),
col.regions = coul,
main = "Behaviour RDM",
xlab = "images (1 - 92)",
ylab = "images (1 - 92)")
View(behaviourRDM)
library(viridisLite)
library(lattice)
# Question 14
behaviourRDM <- read.table("RSAlabassignment/BehaviourRDM", col.names = 1:92)
row <- nrow(behaviourRDM)
col <- ncol(behaviourRDM)
coul <- viridis(row * col)
levelplot(uname(as.matrix(behaviourRDM)),
col.regions = coul,
main = "Behaviour RDM",
xlab = "images (1 - 92)",
ylab = "images (1 - 92)")
library(viridisLite)
library(lattice)
# Question 14
behaviourRDM <- read.table("RSAlabassignment/BehaviourRDM", col.names = 1:92)
row <- nrow(behaviourRDM)
col <- ncol(behaviourRDM)
coul <- viridis(row * col)
levelplot(unname(as.matrix(behaviourRDM)),
col.regions = coul,
main = "Behaviour RDM",
xlab = "images (1 - 92)",
ylab = "images (1 - 92)")
row <- nrow(neuroRDM)
col <- ncol(neuroRDM)
coul <- viridis(row * col)
levelplot(unname(as.matrix(neuroRDM)),
col.regions = coul,
main = "Neuro RDM",
xlab = "images (1 - 92)",
ylab = "images (1 - 92)")
row <- nrow(behaviourRDM)
col <- ncol(behaviourRDM)
coul <- viridis(row * col)
levelplot(unname(as.matrix(behaviourRDM)),
col.regions = coul,
main = "Behaviour RDM",
xlab = "images (1 - 92)",
ylab = "images (1 - 92)")
behaviourRDM_filter <- lower.tri(behaviourRDM, diag = FALSE)
behaviourRDM_unique <- behaviourRDM[behaviourRDM_filter]
cor(behaviourRDM_unique, averageRDM_unique)
cor.test(behaviourRDM_unique, averageRDM_unique)
behaviourRDM_animate <- behaviourRDM[1:48, 1:48]
behaviourRDM_animate_filter <- lower.tri(behaviourRDM_animate, diag = FALSE)
behaviourRDM_animate_unique <- behaviourRDM_animate[behaviourRDM_animate_filter]
averageRDM_animate <- averageRDM_source[1:48,1:48]
averageRDM_animate_filter <- lower.tri(averageRDM_animate, diag = FALSE)
averageRDM_animate_unique <- averageRDM_animate[averageRDM_animate_filter]
cor(behaviourRDM_animate_unique, averageRDM_animate_unique)
cor.test(behaviourRDM_animate_unique, averageRDM_animate_unique)
behaviourRDM_inanimate <- behaviourRDM[49:92, 49:92]
behaviourRDM_inanimate_filter <- lower.tri(behaviourRDM_inanimate, diag = FALSE)
behaviourRDM_inanimate_unique <- behaviourRDM_inanimate[behaviourRDM_inanimate_filter]
averageRDM_inanimate <- averageRDM_source[49:92,49:92]
averageRDM_inanimate_filter <- lower.tri(averageRDM_inanimate, diag = FALSE)
averageRDM_inanimate_unique <- averageRDM_inanimate[averageRDM_inanimate_filter]
cor(behaviourRDM_inanimate_unique, averageRDM_inanimate_unique)
cor.test(behaviourRDM_inanimate_unique, averageRDM_inanimate_unique)
cor.test(behaviourRDM_unique, averageRDM_unique)
# Question 15
hMaxRDM <- read.table("RSAlabassignment/HmaxRDM", col.names = 1:92)
row <- nrow(hMaxRDM)
col <- ncol(hMaxRDM)
coul <- viridis(row * col)
levelplot(unname(as.matrix(hMaxRDM)),
col.regions = coul,
main = "Behaviour RDM",
xlab = "images (1 - 92)",
ylab = "images (1 - 92)")
hMaxRDM_filter <- lower.tri(hMaxRDM, diag = FALSE)
hMaxRDM_unique <- hMaxRDM[hMaxRDM_filter]
cor(hMaxRDM_unique, averageRDM_unique)
cor.test(hMaxRDM_unique, averageRDM_unique)
hMaxRDM__animate <- hMaxRDM_[1:48, 1:48]
hMaxRDM_animate_filter <- lower.tri(hMaxRDM__animate, diag = FALSE)
hMaxRDM_animate_unique <- hMaxRDM__animate[hMaxRDM_animate_filter]
averageRDM_animate <- averageRDM_source[1:48,1:48]
averageRDM_animate_filter <- lower.tri(averageRDM_animate, diag = FALSE)
averageRDM_animate_unique <- averageRDM_animate[averageRDM_animate_filter]
cor(hMaxRDM_animate_unique, averageRDM_animate_unique)
cor.test(hMaxRDM_animate_unique, averageRDM_animate_unique)
hMaxRDM_animate <- hMaxRDM_[1:48, 1:48]
hMaxRDM_animate_filter <- lower.tri(hMaxRDM_animate, diag = FALSE)
hMaxRDM_animate_unique <- hMaxRDM_animate[hMaxRDM_animate_filter]
hMaxRDM_animate <- hMaxRDM[1:48, 1:48]
hMaxRDM_animate_filter <- lower.tri(hMaxRDM_animate, diag = FALSE)
hMaxRDM_animate_unique <- hMaxRDM_animate[hMaxRDM_animate_filter]
averageRDM_animate <- averageRDM_source[1:48,1:48]
averageRDM_animate_filter <- lower.tri(averageRDM_animate, diag = FALSE)
averageRDM_animate_unique <- averageRDM_animate[averageRDM_animate_filter]
cor(hMaxRDM_animate_unique, averageRDM_animate_unique)
cor.test(hMaxRDM_animate_unique, averageRDM_animate_unique)
hMaxRDM_inanimate <- hMaxRDM[49:92, 49:92]
hMaxRDM_inanimate_filter <- lower.tri(hMaxRDM_inanimate, diag = FALSE)
hMaxRDM_inanimate_unique <- hMaxRDM_inanimate[hMaxRDM_inanimate_filter]
averageRDM_inanimate <- averageRDM_source[49:92,49:92]
averageRDM_inanimate_filter <- lower.tri(averageRDM_inanimate, diag = FALSE)
averageRDM_inanimate_unique <- averageRDM_inanimate[averageRDM_inanimate_filter]
cor(hMaxRDM_inanimate_unique, averageRDM_inanimate_unique)
cor.test(hMaxRDM_inanimate_unique, averageRDM_inanimate_unique)
cor.test(behaviourRDM_inanimate_unique, averageRDM_inanimate_unique)
cor.test(behaviourRDM_animate_unique, averageRDM_animate_unique)
cor.test(behaviourRDM_inanimate_unique, averageRDM_inanimate_unique)
cor.test(hMaxRDM_inanimate_unique, averageRDM_inanimate_unique)
library(viridisLite)
library(lattice)
source("q4-5.R")
# Question 15
hMaxRDM <- read.table("RSAlabassignment/HmaxRDM", col.names = 1:92)
row <- nrow(hMaxRDM)
col <- ncol(hMaxRDM)
coul <- viridis(row * col)
levelplot(unname(as.matrix(hMaxRDM)),
col.regions = coul,
main = "Behaviour RDM",
xlab = "images (1 - 92)",
ylab = "images (1 - 92)")
# all data
hMaxRDM_filter <- lower.tri(hMaxRDM, diag = FALSE)
hMaxRDM_unique <- hMaxRDM[hMaxRDM_filter]
cor(hMaxRDM_unique, averageRDM_unique)
cor.test(hMaxRDM_unique, averageRDM_unique)
# animate objects
hMaxRDM_animate <- hMaxRDM[1:48, 1:48]
hMaxRDM_animate_filter <- lower.tri(hMaxRDM_animate, diag = FALSE)
hMaxRDM_animate_unique <- hMaxRDM_animate[hMaxRDM_animate_filter]
averageRDM_animate <- averageRDM_source[1:48,1:48]
averageRDM_animate_filter <- lower.tri(averageRDM_animate, diag = FALSE)
averageRDM_animate_unique <- averageRDM_animate[averageRDM_animate_filter]
cor(hMaxRDM_animate_unique, averageRDM_animate_unique)
cor.test(hMaxRDM_animate_unique, averageRDM_animate_unique)
#inanimate objects
hMaxRDM_inanimate <- hMaxRDM[49:92, 49:92]
hMaxRDM_inanimate_filter <- lower.tri(hMaxRDM_inanimate, diag = FALSE)
hMaxRDM_inanimate_unique <- hMaxRDM_inanimate[hMaxRDM_inanimate_filter]
averageRDM_inanimate <- averageRDM_source[49:92,49:92]
averageRDM_inanimate_filter <- lower.tri(averageRDM_inanimate, diag = FALSE)
averageRDM_inanimate_unique <- averageRDM_inanimate[averageRDM_inanimate_filter]
cor(hMaxRDM_inanimate_unique, averageRDM_inanimate_unique)
cor.test(hMaxRDM_inanimate_unique, averageRDM_inanimate_unique)
library(viridisLite)
library(lattice)
source("q4-5.R")
# Question 15
hMaxRDM <- read.table("RSAlabassignment/HmaxRDM", col.names = 1:92)
row <- nrow(hMaxRDM)
col <- ncol(hMaxRDM)
coul <- viridis(row * col)
levelplot(unname(as.matrix(hMaxRDM)),
col.regions = coul,
main = "Behaviour RDM",
xlab = "images (1 - 92)",
ylab = "images (1 - 92)")
# all data
hMaxRDM_filter <- lower.tri(hMaxRDM, diag = FALSE)
hMaxRDM_unique <- hMaxRDM[hMaxRDM_filter]
cor(hMaxRDM_unique, averageRDM_unique)
cor.test(hMaxRDM_unique, averageRDM_unique)
# animate objects
hMaxRDM_animate <- hMaxRDM[1:48, 1:48]
hMaxRDM_animate_filter <- lower.tri(hMaxRDM_animate, diag = FALSE)
hMaxRDM_animate_unique <- hMaxRDM_animate[hMaxRDM_animate_filter]
averageRDM_animate <- averageRDM_source[1:48,1:48]
averageRDM_animate_filter <- lower.tri(averageRDM_animate, diag = FALSE)
averageRDM_animate_unique <- averageRDM_animate[averageRDM_animate_filter]
cor(hMaxRDM_animate_unique, averageRDM_animate_unique)
cor.test(hMaxRDM_animate_unique, averageRDM_animate_unique)
#inanimate objects
hMaxRDM_inanimate <- hMaxRDM[49:92, 49:92]
hMaxRDM_inanimate_filter <- lower.tri(hMaxRDM_inanimate, diag = FALSE)
hMaxRDM_inanimate_unique <- hMaxRDM_inanimate[hMaxRDM_inanimate_filter]
averageRDM_inanimate <- averageRDM_source[49:92,49:92]
averageRDM_inanimate_filter <- lower.tri(averageRDM_inanimate, diag = FALSE)
averageRDM_inanimate_unique <- averageRDM_inanimate[averageRDM_inanimate_filter]
cor(hMaxRDM_inanimate_unique, averageRDM_inanimate_unique)
cor.test(hMaxRDM_inanimate_unique, averageRDM_inanimate_unique)
library(viridisLite)
library(lattice)
# Question 14
behaviourRDM <- read.table("RSAlabassignment/BehaviourRDM", col.names = 1:92)
row <- nrow(behaviourRDM)
col <- ncol(behaviourRDM)
coul <- viridis(row * col)
levelplot(unname(as.matrix(behaviourRDM)),
col.regions = coul,
main = "Behaviour RDM",
xlab = "images (1 - 92)",
ylab = "images (1 - 92)")
# all data
behaviourRDM_filter <- lower.tri(behaviourRDM, diag = FALSE)
behaviourRDM_unique <- behaviourRDM[behaviourRDM_filter]
cor(behaviourRDM_unique, averageRDM_unique)
cor.test(behaviourRDM_unique, averageRDM_unique)
# animate objects
behaviourRDM_animate <- behaviourRDM[1:48, 1:48]
behaviourRDM_animate_filter <- lower.tri(behaviourRDM_animate, diag = FALSE)
behaviourRDM_animate_unique <- behaviourRDM_animate[behaviourRDM_animate_filter]
averageRDM_animate <- averageRDM_source[1:48,1:48]
averageRDM_animate_filter <- lower.tri(averageRDM_animate, diag = FALSE)
averageRDM_animate_unique <- averageRDM_animate[averageRDM_animate_filter]
cor(behaviourRDM_animate_unique, averageRDM_animate_unique)
cor.test(behaviourRDM_animate_unique, averageRDM_animate_unique)
#inanimate objects
behaviourRDM_inanimate <- behaviourRDM[49:92, 49:92]
behaviourRDM_inanimate_filter <- lower.tri(behaviourRDM_inanimate, diag = FALSE)
behaviourRDM_inanimate_unique <- behaviourRDM_inanimate[behaviourRDM_inanimate_filter]
averageRDM_inanimate <- averageRDM_source[49:92,49:92]
averageRDM_inanimate_filter <- lower.tri(averageRDM_inanimate, diag = FALSE)
averageRDM_inanimate_unique <- averageRDM_inanimate[averageRDM_inanimate_filter]
cor(behaviourRDM_inanimate_unique, averageRDM_inanimate_unique)
cor.test(behaviourRDM_inanimate_unique, averageRDM_inanimate_unique)
hMaxRDM_filter <- lower.tri(hMaxRDM, diag = FALSE)
hMaxRDM_unique <- hMaxRDM[hMaxRDM_filter]
cor(hMaxRDM_unique, averageRDM_unique)
cor.test(hMaxRDM_unique, averageRDM_unique)
# animate objects
hMaxRDM_animate <- hMaxRDM[1:48, 1:48]
hMaxRDM_animate_filter <- lower.tri(hMaxRDM_animate, diag = FALSE)
hMaxRDM_animate_unique <- hMaxRDM_animate[hMaxRDM_animate_filter]
averageRDM_animate <- averageRDM_source[1:48,1:48]
averageRDM_animate_filter <- lower.tri(averageRDM_animate, diag = FALSE)
averageRDM_animate_unique <- averageRDM_animate[averageRDM_animate_filter]
cor(hMaxRDM_animate_unique, averageRDM_animate_unique)
cor.test(hMaxRDM_animate_unique, averageRDM_animate_unique)
#inanimate objects
hMaxRDM_inanimate <- hMaxRDM[49:92, 49:92]
hMaxRDM_inanimate_filter <- lower.tri(hMaxRDM_inanimate, diag = FALSE)
hMaxRDM_inanimate_unique <- hMaxRDM_inanimate[hMaxRDM_inanimate_filter]
averageRDM_inanimate <- averageRDM_source[49:92,49:92]
averageRDM_inanimate_filter <- lower.tri(averageRDM_inanimate, diag = FALSE)
averageRDM_inanimate_unique <- averageRDM_inanimate[averageRDM_inanimate_filter]
cor(hMaxRDM_inanimate_unique, averageRDM_inanimate_unique)
cor.test(hMaxRDM_inanimate_unique, averageRDM_inanimate_unique)
library(lsr)
# options(scipen=999)
categoryVectorsTable <- read.table("RSAlabassignment/CategoryVectors")
categoryLablesTable <- read.table("RSAlabassignment/CategoryLabels")
neuralResponses <- read.table("RSAlabassignment/NeuralResponses")
# Question 9
# Effect of both animacy and face-ness on dissimilarity
# animacy RDM: 92x92
row = 92
col = 92
animacy_rdm_source <- matrix(0, nrow = row, ncol = col)
for(i in 1:row) {
for(j in 1:col) {
if(categoryVectorsTable[i,1] == categoryVectorsTable[j,1]) {
animacy_rdm_source[i, j] = 1
} else {
animacy_rdm_source[i, j] = 0
}
# Retrieve the non-duplicate data from the lower triangle of RDM without the diagonal data
animacy_rdm_lower_triangle_filter <- lower.tri(animacy_rdm_source, diag = FALSE)
animacy_rdm_unique <- animacy_rdm_source[animacy_rdm_lower_triangle_filter]
# Retrieve the non-duplicate data for the neural responses
neuralResponses_source <- 1 - cor(t(neuralResponses))
neuralResponses_lower_triangle_filter <- lower.tri(neuralResponses_source, diag = FALSE)
neuralResponses_unique <- neuralResponses_source[neuralResponses_lower_triangle_filter]
# data frame of the same & different animacy
data_frame <- cbind(neuralResponses_unique, animacy_rdm_unique)
# face-ness RDM: 92x92
row = 48
col = 48
faceness_rdm_source <- matrix(0, nrow = row, ncol = col)
for(i in 1:row) {
for(j in 1:col) {
if(categoryVectorsTable[i,6] == categoryVectorsTable[j,6]) {
faceness_rdm_source[i, j] = 1
} else {
faceness_rdm_source[i, j] = 0
}
faceness_rdm_source <- rbind(faceness_rdm_source, matrix(0, nrow = 44, ncol = 48))
faceness_rdm_source <- cbind(faceness_rdm_source, matrix(0, nrow = 92, ncol = 44))
View(faceness_rdm_source)
# Retrieve the non-duplicate data from the lower triangle of RDM without the diagonal data
faceness_rdm_lower_triangle_filter <- lower.tri(faceness_rdm_source, diag = FALSE)
faceness_rdm_unique <- faceness_rdm_source[faceness_rdm_lower_triangle_filter]
# data frame of the same & different face-ness
data_frame <- cbind(data_frame, faceness_rdm_unique)
View(data_frame)
# Transform to data frame
data_frame <- as.tibble(data_frame)
data_frame <- data_frame %>% rename(dissimilarity = neuralResponses_unique,
animacy = animacy_rdm_unique,
faceness = faceness_rdm_unique)
View(data_frame)
# ANOVA
fit <- aov(dissimilarity ~ animacy + faceness + animacy:faceness, data = data_frame)
etaSquared(fit, type = 2, anova = TRUE)
summary(fit)
total_mean <- mean(data_frame$dissimilarity)
animacy_mean <- mean(animacy_only_data_frame$dissimilarity)
faceness_mean <- mean(faceness_only_data_frame$dissimilarity)
animacy_variance_between <- total_mean - animacy_mean
faceness_variance_between <- total_mean - faceness_mean
animacy_variance_within <- max(animacy_only_data_frame$dissimilarity) -
min(animacy_only_data_frame$dissimilarity)
faceness_variance_within <- max(faceness_only_data_frame$dissimilarity) -
min(faceness_only_data_frame$dissimilarity)
f_animacy <- animacy_variance_between / animacy_variance_within
f_faceness <- faceness_variance_between / faceness_variance_within
animacy_only_data_frame <- data_frame[(which(data_frame$animacy == 1)),]
faceness_only_data_frame <- data_frame[(which(data_frame$faceness == 1)), ]
df_animacy <- nrow(animacy_only_data_frame) - 1
df_faceness <- nrow(faceness_only_data_frame) - 1
critical_value <- 1.12
variance_animacy <- var(animacy_only_data_frame$dissimilarity)
variance_faceness <- var(faceness_only_data_frame$dissimilarity)
# if f_ratio is greater than the critical value, we reject the null hypothesis:
# null hypothesis: variances are equal
# alternative hypothesis: variances are not equal
f_ratio <- variance_faceness / variance_animacy
total_mean <- mean(data_frame$dissimilarity)
animacy_mean <- mean(animacy_only_data_frame$dissimilarity)
faceness_mean <- mean(faceness_only_data_frame$dissimilarity)
animacy_variance_between <- total_mean - animacy_mean
faceness_variance_between <- total_mean - faceness_mean
animacy_variance_within <- max(animacy_only_data_frame$dissimilarity) -
min(animacy_only_data_frame$dissimilarity)
faceness_variance_within <- max(faceness_only_data_frame$dissimilarity) -
min(faceness_only_data_frame$dissimilarity)
f_animacy <- animacy_variance_between / animacy_variance_within
f_faceness <- faceness_variance_between / faceness_variance_within
f_animacy
f_faceness
fit <- aov(dissimilarity ~ animacy + faceness + animacy:faceness, data = data_frame)
etaSquared(fit, type = 2, anova = TRUE)
summary(fit)
glm(dissimilarity ~ snimacy * faceness, data = data_frame)
model <- glm(dissimilarity ~ animacy * faceness, data = data_frame)
summary(model)
fit <- aov(dissimilarity ~ animacy + faceness + animacy:faceness, data = data_frame)
etaSquared(fit, type = 2, anova = TRUE)
summary(fit)
TukeyHSD(fit)
data_frame$animacy <- factor(data_frame$animacy)
data_frame$faceness <- factor(data_frame$faceness)
fit <- aov(dissimilarity ~ animacy + faceness + animacy:faceness, data = data_frame)
etaSquared(fit, type = 2, anova = TRUE)
summary(fit)
TukeyHSD(fit)
model <- glm(dissimilarity ~ animacy * faceness, data = data_frame)
summary(model)
View(data_frame)
fit <- aov(dissimilarity ~ animacy + faceness + animacy:faceness, data = data_frame)
etaSquared(fit, type = 2, anova = TRUE)
summary(fit)
model <- glm(dissimilarity ~ animacy * faceness, data = data_frame)
summary(model)
# glm(starting ~ animacy + animacy_face)
model <- glm(dissimilarity ~ animacy + faceness:animacy, data = data_frame)
summary(model)
# glm(starting ~ animacy + animacy_face)
model <- glm(dissimilarity ~ animacy + animacy:faceness, data = data_frame)
summary(model)
# glm(starting ~ animacy + animacy_face)
model <- glm(dissimilarity ~ animacy + animacy:faceness, data = data_frame)
model1 <- aov(dissimilarity ~ animacy + animacy:faceness, data = data_frame)
summary(model1)
# glm(starting ~ animacy + animacy_face)
model <- glm(dissimilarity ~ animacy + animacy:faceness, data = data_frame)
summary(model)
model2 <- glm(dissimilarity ~ animacy + faceness, data = data_frame)
summary(model2)
fit <- aov(dissimilarity ~ animacy + animacy:faceness, data = data_frame)
etaSquared(fit, type = 2, anova = TRUE)
summary(fit)
model <- glm(dissimilarity ~ animacy + animacy:faceness, data = data_frame)
summary(model)
beta.glm(model)
beta(model)
install.packages("reghelper")
beta.glm(model)
beta(model)
beta(model, model)
beta(model$effects, model)
# data frame of the same & different face-ness
data_frame <- cbind(data_frame, faceness_rdm_unique)
# data frame of the same & different face-ness
data_frame <- cbind(data_frame, faceness_rdm_unique)
fit <- aov(dissimilarity ~ animacy + animacy:faceness, data = data_frame)
etaSquared(fit, type = 2, anova = TRUE)
summary(fit)
model <- glm(dissimilarity ~ animacy + animacy:faceness, data = data_frame)
summary(model)
beta(model, x = TRUE, y = TRUE)
model <- glm(dissimilarity ~ animacy + animacy:faceness, data = data_frame)
summary(model)
# beta
library(reghelper)
beta(model, x = TRUE, y = TRUE)
# glm(starting ~ animacy + animacy_face)
model <- glm(dissimilarity ~ animacy + animacy:faceness, data = data_frame)
# glm(starting ~ animacy + animacy_face)
model <- glm(dissimilarity ~ animacy + animacy:faceness, data = data_frame)
summary(model)
# effects
library(effects)
plot(effect("animacy:faceness", model, , list(faceness=c(1, 0))), multiline = TRUE)
plot(effect("animacy:faceness", model, , list(faceness=c(0))), multiline = TRUE)
plot(effect("faceness:animacy", model, , list(faceness=c(0,1))), multiline = TRUE)
plot(effect("animacy:faceness", model, , list(faceness=c(0,1))), multiline = TRUE)
plot(effect("animacy:faceness", model, , list(animacy=c(0,1))), multiline = TRUE)
beta(model, x = TRUE, y = TRUE)
summary(model)
beta(model, x = TRUE, y = TRUE)
